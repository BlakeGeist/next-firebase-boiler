{"ast":null,"code":"import _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport withReduxStore from '../lib/reducers';\nimport { Provider } from 'react-redux';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\nimport \"firebase/firestore\"; //TODO prolly move the firebase everything to an api call, this should prolly be done server side\n\nimport clientCredentials from '..//credentials/client';\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(clientCredentials);\n}\n\n;\nconst db = firebase.app().firestore();\n\nconst MyApp = ({\n  Component,\n  pageProps,\n  reduxStore\n}) => {\n  return __jsx(Provider, {\n    store: reduxStore\n  }, __jsx(Component, pageProps));\n};\n\nMyApp.getInitialProps = async ({\n  Component,\n  ctx\n}) => {\n  const headers = ctx.req.headers;\n  const userRegionLang = headers['accept-language'].split(',')[0].split('-');\n  const userLang = userRegionLang[0];\n  const userRegion = userRegionLang[1].toLowerCase(); //if there is no lang redirect to route with lang\n\n  if (!ctx.query.lang) ctx.res.redirect(`/${userLang}`);\n  const pathWithoutLang = ctx.asPath.replace(`/${ctx.query.lang}/`, '').replace('/', '-');\n  let pageStrings = db.collection(\"strings\").doc(pathWithoutLang).collection('strings');\n  await pageStrings.get().then(snap => {\n    pageStrings = snap.docs.map(d => {\n      return {\n        [d.id]: d.data()\n      };\n    });\n\n    const objectizedStrings = _Object$assign({}, ...pageStrings);\n\n    ctx.reduxStore.dispatch({\n      type: 'SET_ITEM',\n      name: 'pageStrings',\n      payload: objectizedStrings\n    });\n  }).catch(e => {\n    console.log('err', e);\n  });\n  let strings = db.collection(\"strings\").doc('global').collection('strings');\n  await strings.get().then(snap => {\n    strings = snap.docs.map(d => {\n      return {\n        [d.id]: d.data()\n      };\n    });\n\n    const objectizedStrings = _Object$assign({}, ...strings);\n\n    ctx.reduxStore.dispatch({\n      type: 'SET_ITEM',\n      name: 'strings',\n      payload: objectizedStrings\n    });\n  }).catch(e => {\n    console.log('err', e);\n  });\n  const user = ctx.req && ctx.req.session ? ctx.req.session.decodedToken : null;\n  user ? ctx.reduxStore.dispatch({\n    type: 'SET_ITEM',\n    name: 'user',\n    payload: user\n  }) : '';\n  user ? ctx.reduxStore.dispatch({\n    type: 'SET_ITEM',\n    name: 'isLoggedIn',\n    payload: true\n  }) : '';\n  ctx.reduxStore.dispatch({\n    type: 'SET_ITEM',\n    name: 'lang',\n    payload: ctx.query.lang\n  });\n  const pageProps = Component.getInitialProps ? await Component.getInitialProps(ctx) : {};\n  return {\n    pageProps\n  };\n};\n\nexport default withReduxStore(MyApp);","map":null,"metadata":{},"sourceType":"module"}