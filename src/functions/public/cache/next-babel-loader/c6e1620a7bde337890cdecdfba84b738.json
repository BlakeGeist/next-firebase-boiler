{"ast":null,"code":"var _parseFloat = require(\"@babel/runtime-corejs2/core-js/parse-float\");\n\nconst filterOutliers = someArray => {\n  if (someArray.length < 4) return someArray;\n  let values, q1, q3, iqr, maxValue, minValue;\n  values = someArray.slice().sort((a, b) => a - b); //copy array fast and sort\n\n  if (values.length / 4 % 1 === 0) {\n    //find quartiles\n    q1 = 1 / 2 * (values[values.length / 4] + values[values.length / 4 + 1]);\n    q3 = 1 / 2 * (values[values.length * (3 / 4)] + values[values.length * (3 / 4) + 1]);\n  } else {\n    q1 = values[Math.floor(values.length / 4 + 1)];\n    q3 = values[Math.ceil(values.length * (3 / 4) + 1)];\n  }\n\n  iqr = q3 - q1;\n  maxValue = q3 + iqr * 1.5;\n  minValue = q1 - iqr * 1.5;\n  return values.filter(x => x >= minValue && x <= maxValue);\n};\n\nconst getAverage = someArray => {\n  let total = 0;\n  someArray.forEach(float => {\n    total += _parseFloat(float);\n  });\n  let average = total / someArray.length;\n  return average;\n};\n\nconst roundMoney = float => {\n  return Math.ceil(float * 100) / 100;\n};\n\nconst moneyRoundOfArray = someArray => {\n  let total = 0;\n  someArray.forEach(number => {\n    total += _parseFloat(number);\n  });\n  return roundMoney(total);\n};\n\nconst firstNumber = string => {\n  if (string.match(/\\d+/)) {\n    if (string.match(/\\d+/)[0] > 4) {\n      return 1;\n    } else {\n      return string.match(/\\d+/)[0];\n    }\n  } else {\n    return 1;\n  }\n};\n\nconst priceByQTY = (number, price) => {\n  return '$' + roundMoney(price / number);\n};\n\nconst translate = (string, strings, lang) => {\n  if (strings[string] && strings[string][lang]) return strings[string][lang];\n  return null;\n};\n\nmodule.exports = {\n  filterOutliers,\n  getAverage,\n  roundMoney,\n  firstNumber,\n  priceByQTY,\n  moneyRoundOfArray,\n  translate\n};","map":null,"metadata":{},"sourceType":"script"}