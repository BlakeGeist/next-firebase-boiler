{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { Formik } from 'formik';\nimport { connect } from 'react-redux';\nimport axios from 'axios';\nimport { translate } from '../../../../../helpers/quickHelpers';\n\nvar Form = function Form(_ref) {\n  var strings = _ref.strings,\n      pageStrings = _ref.pageStrings,\n      lang = _ref.lang;\n\n  var convertToSlug = function convertToSlug(text) {\n    return text.toUpperCase().replace(/[^\\w ]+/g, '').replace(/ +/g, '-');\n  };\n\n  return __jsx(Formik, {\n    initialValues: {\n      string_name: '',\n      string_value: '',\n      string_scope: ''\n    },\n    validate: function validate(values) {\n      var errors = {};\n\n      if (!values.string_name) {\n        errors.string_name = 'Required';\n      } else if (!values.string_value) {\n        errors.string_value = 'Required';\n      } else if (!values.string_scope) {\n        errors.string_scope = 'Required';\n      }\n\n      return errors;\n    },\n    onSubmit:\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(values, _ref2) {\n        var setSubmitting, formData, response;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                setSubmitting = _ref2.setSubmitting;\n                formData = _JSON$stringify(values, null, 2);\n                response = axios.post('/api/translate', {\n                  text: values.string_name,\n                  slug: values.string_value,\n                  scope: values.string_scope\n                }, {\n                  headers: {\n                    'Content-Type': 'application/json'\n                  }\n                });\n                setSubmitting(false);\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x, _x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }()\n  }, function (_ref4) {\n    var values = _ref4.values,\n        errors = _ref4.errors,\n        touched = _ref4.touched,\n        handleChange = _ref4.handleChange,\n        handleBlur = _ref4.handleBlur,\n        handleSubmit = _ref4.handleSubmit,\n        isSubmitting = _ref4.isSubmitting,\n        setFieldValue = _ref4.setFieldValue;\n    return __jsx(\"form\", {\n      onSubmit: handleSubmit\n    }, __jsx(\"label\", null, __jsx(\"div\", null, translate('STRING-NAME', pageStrings, lang)), __jsx(\"input\", {\n      type: \"text\",\n      name: \"string_name\",\n      onChange: function onChange(e) {\n        setFieldValue('string_value', convertToSlug(e.target.value), true);\n        handleChange(e);\n      },\n      onBlur: handleBlur,\n      value: values.string_name\n    }), errors.string_name && touched.string_name && errors.string_name), __jsx(\"label\", null, __jsx(\"div\", null, translate('STRING-VALUE', pageStrings, lang)), __jsx(\"input\", {\n      type: \"text\",\n      name: \"string_value\",\n      onChange: handleChange,\n      onBlur: handleBlur,\n      value: values.string_value\n    }), errors.string_value && touched.string_value && errors.string_value), __jsx(\"label\", null, __jsx(\"div\", null, translate('STRING-SCOPE', pageStrings, lang)), __jsx(\"input\", {\n      type: \"text\",\n      name: \"string_scope\",\n      onChange: handleChange,\n      onBlur: handleBlur,\n      value: values.string_scope\n    }), errors.string_scope && touched.string_scope && errors.string_scope), __jsx(\"button\", {\n      type: \"submit\",\n      disabled: isSubmitting\n    }, translate('SUBMIT', strings, lang)));\n  });\n};\n\nexport default connect(function (state) {\n  return state;\n})(Form);","map":null,"metadata":{},"sourceType":"module"}