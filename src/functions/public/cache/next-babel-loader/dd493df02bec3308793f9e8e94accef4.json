{"ast":null,"code":"var _parseFloat = require(\"@babel/runtime-corejs2/core-js/parse-float\");\n\nvar filterOutliers = function filterOutliers(someArray) {\n  if (someArray.length < 4) return someArray;\n  var values, q1, q3, iqr, maxValue, minValue;\n  values = someArray.slice().sort(function (a, b) {\n    return a - b;\n  }); //copy array fast and sort\n\n  if (values.length / 4 % 1 === 0) {\n    //find quartiles\n    q1 = 1 / 2 * (values[values.length / 4] + values[values.length / 4 + 1]);\n    q3 = 1 / 2 * (values[values.length * (3 / 4)] + values[values.length * (3 / 4) + 1]);\n  } else {\n    q1 = values[Math.floor(values.length / 4 + 1)];\n    q3 = values[Math.ceil(values.length * (3 / 4) + 1)];\n  }\n\n  iqr = q3 - q1;\n  maxValue = q3 + iqr * 1.5;\n  minValue = q1 - iqr * 1.5;\n  return values.filter(function (x) {\n    return x >= minValue && x <= maxValue;\n  });\n};\n\nvar getAverage = function getAverage(someArray) {\n  var total = 0;\n  someArray.forEach(function (_float) {\n    total += _parseFloat(_float);\n  });\n  var average = total / someArray.length;\n  return average;\n};\n\nvar roundMoney = function roundMoney(_float2) {\n  return Math.ceil(_float2 * 100) / 100;\n};\n\nvar moneyRoundOfArray = function moneyRoundOfArray(someArray) {\n  var total = 0;\n  someArray.forEach(function (number) {\n    total += _parseFloat(number);\n  });\n  return roundMoney(total);\n};\n\nvar firstNumber = function firstNumber(string) {\n  if (string.match(/\\d+/)) {\n    if (string.match(/\\d+/)[0] > 4) {\n      return 1;\n    } else {\n      return string.match(/\\d+/)[0];\n    }\n  } else {\n    return 1;\n  }\n};\n\nvar priceByQTY = function priceByQTY(number, price) {\n  return '$' + roundMoney(price / number);\n};\n\nvar translate = function translate(string, strings, lang) {\n  if (strings[string] && strings[string][lang]) return strings[string][lang];\n  return null;\n};\n\nmodule.exports = {\n  filterOutliers: filterOutliers,\n  getAverage: getAverage,\n  roundMoney: roundMoney,\n  firstNumber: firstNumber,\n  priceByQTY: priceByQTY,\n  moneyRoundOfArray: moneyRoundOfArray,\n  translate: translate\n};","map":null,"metadata":{},"sourceType":"script"}