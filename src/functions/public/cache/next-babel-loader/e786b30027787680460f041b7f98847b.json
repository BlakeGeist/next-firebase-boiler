{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport withReduxStore from '../lib/reducers';\nimport { Provider } from 'react-redux';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\nimport \"firebase/firestore\"; //TODO prolly move the firebase everything to an api call, this should prolly be done server side\n\nimport clientCredentials from '..//credentials/client';\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(clientCredentials);\n}\n\n;\nvar db = firebase.app().firestore();\n\nvar MyApp = function MyApp(_ref) {\n  var Component = _ref.Component,\n      pageProps = _ref.pageProps,\n      reduxStore = _ref.reduxStore;\n  return __jsx(Provider, {\n    store: reduxStore\n  }, __jsx(Component, pageProps));\n};\n\nMyApp.getInitialProps =\n/*#__PURE__*/\nfunction () {\n  var _ref3 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(_ref2) {\n    var Component, ctx, headers, userRegionLang, userLang, userRegion, pathWithoutLang, pageStrings, strings, user, pageProps;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            Component = _ref2.Component, ctx = _ref2.ctx;\n            headers = ctx.req.headers;\n            userRegionLang = headers['accept-language'].split(',')[0].split('-');\n            userLang = userRegionLang[0];\n            userRegion = userRegionLang[1].toLowerCase(); //if there is no lang redirect to route with lang\n\n            if (!ctx.query.lang) ctx.res.redirect(\"/\".concat(userLang));\n            pathWithoutLang = ctx.asPath.replace(\"/\".concat(ctx.query.lang, \"/\"), '').replace('/', '-');\n            pageStrings = db.collection(\"strings\").doc(pathWithoutLang).collection('strings');\n            _context.next = 10;\n            return pageStrings.get().then(function (snap) {\n              pageStrings = snap.docs.map(function (d) {\n                return _defineProperty({}, d.id, d.data());\n              });\n\n              var objectizedStrings = _Object$assign.apply(Object, [{}].concat(_toConsumableArray(pageStrings)));\n\n              ctx.reduxStore.dispatch({\n                type: 'SET_ITEM',\n                name: 'pageStrings',\n                payload: objectizedStrings\n              });\n            })[\"catch\"](function (e) {\n              console.log('err', e);\n            });\n\n          case 10:\n            strings = db.collection(\"strings\").doc('global').collection('strings');\n            _context.next = 13;\n            return strings.get().then(function (snap) {\n              strings = snap.docs.map(function (d) {\n                return _defineProperty({}, d.id, d.data());\n              });\n\n              var objectizedStrings = _Object$assign.apply(Object, [{}].concat(_toConsumableArray(strings)));\n\n              ctx.reduxStore.dispatch({\n                type: 'SET_ITEM',\n                name: 'strings',\n                payload: objectizedStrings\n              });\n            })[\"catch\"](function (e) {\n              console.log('err', e);\n            });\n\n          case 13:\n            user = ctx.req && ctx.req.session ? ctx.req.session.decodedToken : null;\n            user ? ctx.reduxStore.dispatch({\n              type: 'SET_ITEM',\n              name: 'user',\n              payload: user\n            }) : '';\n            user ? ctx.reduxStore.dispatch({\n              type: 'SET_ITEM',\n              name: 'isLoggedIn',\n              payload: true\n            }) : '';\n            ctx.reduxStore.dispatch({\n              type: 'SET_ITEM',\n              name: 'lang',\n              payload: ctx.query.lang\n            });\n\n            if (!Component.getInitialProps) {\n              _context.next = 23;\n              break;\n            }\n\n            _context.next = 20;\n            return Component.getInitialProps(ctx);\n\n          case 20:\n            _context.t0 = _context.sent;\n            _context.next = 24;\n            break;\n\n          case 23:\n            _context.t0 = {};\n\n          case 24:\n            pageProps = _context.t0;\n            return _context.abrupt(\"return\", {\n              pageProps: pageProps\n            });\n\n          case 26:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nexport default withReduxStore(MyApp);","map":null,"metadata":{},"sourceType":"module"}